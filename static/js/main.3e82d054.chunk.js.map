{"version":3,"sources":["logo.svg","Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","props","state","edit","id","mockData","title","done","date","Date","event","preventDefault","this","setState","now","target","item","value","arguments","filter","onSubmit","onUpdateHandle","bind","type","name","className","defaultValue","map","updatedItem","renderEditForm","onSubmitHandle","key","onClick","onDeleteHandle","onEditHandle","onCompleteHandle","Component","App","show","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e82d054.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nexport default class Todo extends Component {     \r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            edit: false,\r\n            id: null,\r\n            mockData: [\r\n                {\r\n                    id: '1',\r\n                    title: 'Buy Milk.',\r\n                    done: false,\r\n                    date: new Date()\r\n                },\r\n                {\r\n                    id: '2',\r\n                    title: 'Meeting with Ali.',\r\n                    done: false,\r\n                    date: new Date()\r\n                }, \r\n                {\r\n                    id: '3',\r\n                    title: 'Tea break.',\r\n                    done: false,\r\n                    date: new Date()\r\n                }, \r\n                {\r\n                    id: '4',\r\n                    title: 'Go for a run.',\r\n                    done: false,\r\n                    date: new Date()\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    onSubmitHandle(event) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            mockData: [...this.state.mockData, {\r\n                id: Date.now(),\r\n                title: event.target.item.value,\r\n                done: false,\r\n                date: new Date()\r\n            }]\r\n        });\r\n        event.target.item.value = '';\r\n    }\r\n\r\n    onDeleteHandle() {\r\n        let id = arguments[0];\r\n        this.setState({\r\n            mockData: this.state.mockData.filter(item => {\r\n                if (item.id !== id) {\r\n                    return item;\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    onEditHandle(event) {\r\n        this.setState({\r\n            edit: true,\r\n            id: arguments[0],\r\n            title: arguments[1]\r\n        });\r\n    }\r\n    renderEditForm() {\r\n        if (this.state.edit) {\r\n        return <form onSubmit={this.onUpdateHandle.bind(this)}>\r\n            <input type=\"text\" name=\"updatedItem\" className=\"item\" defaultValue={this.state.title} />\r\n            <button className=\"update-add-item\">Update</button>\r\n        </form>\r\n        }\r\n    }\r\n\r\n    onUpdateHandle(event) {\r\n        event.preventDefault();\r\n    \r\n        this.setState({\r\n            mockData: this.state.mockData.map(item => {\r\n                if (item.id === this.state.id) {\r\n                    item['title'] = event.target.updatedItem.value;\r\n                    return item;\r\n                }\r\n            \r\n                return item;\r\n            })\r\n        });\r\n    \r\n        this.setState({\r\n            edit: false\r\n        });\r\n    }\r\n\r\n    onCompleteHandle() {\r\n        let id = arguments[0];\r\n    \r\n        this.setState({\r\n            mockData: this.state.mockData.map(item => {\r\n                if (item.id === id) {\r\n                    item['done'] = true;\r\n                    return item;\r\n                }\r\n        \r\n                return item;\r\n            })\r\n        });\r\n    }\r\n    render() {        \r\n        return(\r\n            <div>\r\n                {this.renderEditForm()}\r\n                <form onSubmit={this.onSubmitHandle.bind(this)}>\r\n                    <input type=\"text\" name=\"item\" className=\"item\" />\r\n                    <button className=\"btn-add-item\">Add</button>\r\n                </form>\r\n                <ul>\r\n                    {this.state.mockData.map(item => (\r\n                        <li key={item.id} className={ item.done ? 'done' : 'hidden' }>\r\n                            {item.title}\r\n                            <button onClick={this.onDeleteHandle.bind(this, item.id)}>Delete</button>\r\n                            <button onClick={this.onEditHandle.bind(this, item.id, item.title)}>Edit</button>\r\n                            <button onClick={this.onCompleteHandle.bind(this, item.id)}>Complete</button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        )     \r\n    }  \r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todo from './Todo';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      show: false\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Todo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}